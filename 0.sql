-- MySQL Script generated by MySQL Workbench
-- Mon Dec  3 22:09:08 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema shopdb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema shopdb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `shopdb` DEFAULT CHARACTER SET utf8 ;
USE `shopdb` ;

-- -----------------------------------------------------
-- Table `shopdb`.`OrderStatus`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `shopdb`.`OrderStatus` ;

CREATE TABLE IF NOT EXISTS `shopdb`.`OrderStatus` (
  `OrderStatusID` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NULL,
  PRIMARY KEY (`OrderStatusID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `shopdb`.`Customer`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `shopdb`.`Customer` ;

CREATE TABLE IF NOT EXISTS `shopdb`.`Customer` (
  `CustomerID` INT NOT NULL AUTO_INCREMENT,
  `CompanyName` VARCHAR(45) NULL,
  `ContactName` VARCHAR(45) NULL,
  `City` VARCHAR(45) NULL,
  `Address` VARCHAR(100) NULL,
  `Email` VARCHAR(100) NULL,
  `PhoneNumber` VARCHAR(14) NULL,
  PRIMARY KEY (`CustomerID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `shopdb`.`ShipmentType`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `shopdb`.`ShipmentType` ;

CREATE TABLE IF NOT EXISTS `shopdb`.`ShipmentType` (
  `ShipmentTypeID` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NULL,
  `Description` VARCHAR(255) NULL,
  PRIMARY KEY (`ShipmentTypeID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `shopdb`.`Orders`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `shopdb`.`Orders` ;

CREATE TABLE IF NOT EXISTS `shopdb`.`Orders` (
  `OrderID` INT NOT NULL AUTO_INCREMENT,
  `OrderStatusID` INT NOT NULL,
  `CustomerID` INT NOT NULL,
  `TransportTypeID` INT NOT NULL,
  `CreationDate` DATETIME NULL,
  `PlannedDate` DATETIME NULL,
  `ShipmentDate` DATETIME NULL,
  PRIMARY KEY (`OrderID`),
  CONSTRAINT `fk_Orders_OrderStatus1`
    FOREIGN KEY (`OrderStatusID`)
    REFERENCES `shopdb`.`OrderStatus` (`OrderStatusID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Orders_Customer1`
    FOREIGN KEY (`CustomerID`)
    REFERENCES `shopdb`.`Customer` (`CustomerID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Orders_TransportType1`
    FOREIGN KEY (`TransportTypeID`)
    REFERENCES `shopdb`.`ShipmentType` (`ShipmentTypeID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `shopdb`.`Product`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `shopdb`.`Product` ;

CREATE TABLE IF NOT EXISTS `shopdb`.`Product` (
  `ProductID` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NULL,
  `Measure` VARCHAR(45) NULL,
  `Price` DOUBLE NULL,
  PRIMARY KEY (`ProductID`),
  UNIQUE INDEX (`Name`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `shopdb`.`OrderPosition`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `shopdb`.`OrderPosition` ;

CREATE TABLE IF NOT EXISTS `shopdb`.`OrderPosition` (
  `OrderPositionID` INT NOT NULL AUTO_INCREMENT,
  `OrderID` INT NOT NULL,
  `ProductID` INT NOT NULL,
  `Quantity` DOUBLE NULL,
  `CurrentPrice` DOUBLE NULL,
  PRIMARY KEY (`OrderPositionID`),
  CONSTRAINT `fk_OrderPosition_Orders`
    FOREIGN KEY (`OrderID`)
    REFERENCES `shopdb`.`Orders` (`OrderID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_OrderPosition_Product1`
    FOREIGN KEY (`ProductID`)
    REFERENCES `shopdb`.`Product` (`ProductID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- MySQL Script generated by MySQL Workbench
-- Mon Dec  3 22:09:54 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema shopstore
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema shopstore
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `shopstore` DEFAULT CHARACTER SET utf8 ;
USE `shopstore` ;

-- -----------------------------------------------------
-- Table `shopstore`.`ProductDim`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `shopstore`.`ProductDim` ;

CREATE TABLE IF NOT EXISTS `shopstore`.`ProductDim` (
  `ProductKey` INT NOT NULL AUTO_INCREMENT,
  `ProductID` INT NULL,
  `Name` VARCHAR(45) NULL,
  `Measure` VARCHAR(45) NULL,
  PRIMARY KEY (`ProductKey`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `shopstore`.`CustomerDim`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `shopstore`.`CustomerDim` ;

CREATE TABLE IF NOT EXISTS `shopstore`.`CustomerDim` (
  `CustomerKey` INT NOT NULL AUTO_INCREMENT,
  `CustomerID` INT NULL,
  `CompanyName` VARCHAR(45) NULL,
  `ContactName` VARCHAR(45) NULL,
  `City` VARCHAR(45) NULL,
  `Address` VARCHAR(45) NULL,
  `Email` VARCHAR(45) NULL,
  `PhoneNumber` VARCHAR(45) NULL,
  PRIMARY KEY (`CustomerKey`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `shopstore`.`StatusDim`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `shopstore`.`StatusDim` ;

CREATE TABLE IF NOT EXISTS `shopstore`.`StatusDim` (
  `StatusKey` INT NOT NULL AUTO_INCREMENT,
  `OrderStatusID` INT NULL,
  `Name` VARCHAR(45) NULL,
  PRIMARY KEY (`StatusKey`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `shopstore`.`ShipmentDim`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `shopstore`.`ShipmentDim` ;

CREATE TABLE IF NOT EXISTS `shopstore`.`ShipmentDim` (
  `ShipmentKey` INT NOT NULL AUTO_INCREMENT,
  `ShipmentTypeID` INT NULL,
  `Name` VARCHAR(45) NULL,
  `Description` VARCHAR(255) NULL,
  PRIMARY KEY (`ShipmentKey`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `shopstore`.`DateDim`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `shopstore`.`DateDim` ;

CREATE TABLE IF NOT EXISTS `shopstore`.`DateDim` (
  `DateKey` INT NOT NULL AUTO_INCREMENT,
  `DateYear` INT NULL,
  `DateMonth` INT NULL,
  `DateDay` INT NULL,
  `IsHoliday` TINYINT NULL,
  `IsWeekend` TINYINT NULL,
  PRIMARY KEY (`DateKey`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `shopstore`.`OrderDim`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `shopstore`.`OrderDim` ;

CREATE TABLE IF NOT EXISTS `shopstore`.`OrderDim` (
  `OrderKey` INT NOT NULL AUTO_INCREMENT,
  `OrderID` INT NULL,
  `CreationDate` DATETIME NULL,
  `PlannedDate` DATETIME NULL,
  `ShipmentDate` DATETIME NULL,
  PRIMARY KEY (`OrderKey`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `shopstore`.`SalesFact`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `shopstore`.`SalesFact` ;

CREATE TABLE IF NOT EXISTS `shopstore`.`SalesFact` (
  `ProductKey` INT NOT NULL,
  `CustomerKey` INT NOT NULL,
  `OrderKey` INT NOT NULL,
  `StatusKey` INT NOT NULL,
  `ShipmentKey` INT NOT NULL,
  `CreationDateKey` INT NOT NULL,
  `PlannedDateKey` INT NOT NULL,
  `ShipmentDateKey` INT NOT NULL,
  `OrderPositionID` INT NOT NULL,
  `Quantity` DOUBLE NULL,
  `SalePrice` DOUBLE NULL,
  `ProductPrice` DOUBLE NULL,
  PRIMARY KEY (`ProductKey`, `CustomerKey`, `OrderKey`, `StatusKey`, `ShipmentKey`, `CreationDateKey`, `PlannedDateKey`, `ShipmentDateKey`),
  CONSTRAINT `fk_OrderPositionFact_ProductDim1`
    FOREIGN KEY (`ProductKey`)
    REFERENCES `shopstore`.`ProductDim` (`ProductKey`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SalesFact_CustomerDim1`
    FOREIGN KEY (`CustomerKey`)
    REFERENCES `shopstore`.`CustomerDim` (`CustomerKey`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SalesFact_StatusDim1`
    FOREIGN KEY (`StatusKey`)
    REFERENCES `shopstore`.`StatusDim` (`StatusKey`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SalesFact_ShipmentDim1`
    FOREIGN KEY (`ShipmentKey`)
    REFERENCES `shopstore`.`ShipmentDim` (`ShipmentKey`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SalesFact_DateDim1`
    FOREIGN KEY (`CreationDateKey`)
    REFERENCES `shopstore`.`DateDim` (`DateKey`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SalesFact_OrderDim1`
    FOREIGN KEY (`OrderKey`)
    REFERENCES `shopstore`.`OrderDim` (`OrderKey`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SalesFact_DateDim2`
    FOREIGN KEY (`PlannedDateKey`)
    REFERENCES `shopstore`.`DateDim` (`DateKey`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SalesFact_DateDim3`
    FOREIGN KEY (`ShipmentDateKey`)
    REFERENCES `shopstore`.`DateDim` (`DateKey`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;


-- MySQL Script generated by MySQL Workbench
-- Mon Dec  3 22:12:09 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema shopwindow
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema shopwindow
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `shopwindow` DEFAULT CHARACTER SET utf8 ;
USE `shopwindow` ;

-- -----------------------------------------------------
-- Table `shopwindow`.`DailySales`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `shopwindow`.`DailySales` ;

CREATE TABLE IF NOT EXISTS `shopwindow`.`DailySales` (
  `ProductID` INT NOT NULL,
  `ProductName` VARCHAR(45) NOT NULL,
  `ProductMeasure` VARCHAR(45) NOT NULL,
  `TotalQuantity` VARCHAR(45) NOT NULL,
  `TotalPrice` DOUBLE NOT NULL,
  `OrderDay` INT NOT NULL,
  `OrderMonth` INT NOT NULL,
  `OrderYear` INT NOT NULL,
  PRIMARY KEY (`ProductID`, `OrderDay`, `OrderMonth`, `OrderYear`))
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;


insert into shopdb.Customer (CustomerID, CompanyName, ContactName, City, Address, Email, PhoneNumber)
values
	(1, 'Neva', 'Aleksandrov Oleg', 'Saint Petersburg', 'Esenina 100', 'alexandrov@gmail.com', '+78128912828'),
	(2, 'Moscow', 'Ivanov Alexandr', 'Moscow', 'Pushkina 1', 'ivanov@mail.ru', '+74952718412'),
	(3, 'Black Sea', 'Artemova Anna', 'Sochi', 'Tolstogo 29', 'artemova@blacksea.ru', '+79003832212'),
	(4, 'Krimea', 'Petrov Sergey', 'Sevastopol', 'Morskaya 20', 's.petrov@rambler.ru', '+78219283661'),
	(5, 'Siberia', 'Borisov Denis', 'Krasnoyarsk', 'Chekhova 2', 'd.a.borisov@siberiaprod.com', '+73912727911'),
	(6, 'FarEast', 'Romanova Irina', 'Vladivostor', 'Mira 9', 'romanova@fareast.ru', '+79009222882')
on duplicate key update CustomerID = CustomerID;

set @neva = 1;
set @moscow = 2;
set @blacksea = 3;
set @krimea = 4;
set @siberia = 5;
set @fareast = 6;

insert into shopdb.Product (ProductID, Name, Measure, Price)
values
	(1, 'Iron', 'ton', 200),
	(2, 'Wood', 'm3', 150),
	(3, 'Plastic', 'ton', 489),
	(4, 'Sand', 'ton', 101),
	(5, 'Stone', 'ton', 90),
	(6, 'Coal', 'ton', 130),
	(7, 'Oil', 'barrel', 1000)
on duplicate key update ProductID = ProductID;

set @iron = 1;
set @wood = 2;
set @plastic = 3;
set @sand = 4;
set @stone = 5;
set @coal = 6;
set @oil = 7;

insert into shopdb.ShipmentType (ShipmentTypeID, Name, Description)
values
	(1, 'Railroad', 'Using trains'),
	(2, 'Aircraft', 'By air'),
	(3, 'Auto', 'By trucks'),
	(4, 'Cargo', 'By sea')
on duplicate key update ShipmentTypeID = ShipmentTypeID;

set @railroad = 1;
set @aircraft = 2;
set @auto = 3;
set @cargo = 4;

insert into shopdb.orderstatus (OrderStatusID, Name)
values 
	(1, 'Preparing'),
	(2, 'Waiting for loading'),
	(3, 'Transportation'),
	(4, 'Waiting for unloading'),
	(5, 'Delivered')
on duplicate key update OrderStatusID = OrderStatusID;

set @prepairing = 1;
set @waitload = 2;
set @transport = 3;
set @waitunload = 4;
set @delivered = 5;

insert into shopdb.orders (OrderID, OrderStatusID, CustomerID, TransportTypeID, CreationDate, PlannedDate, ShipmentDate)
values
	(1, @delivered, @neva, @railroad, '2018-01-19 14:12', '2018-01-24 15:00', '2018-01-24 14:31'),
	(2, @waitunload, @moscow, @auto, '2018-01-20 15:17', '2018-01-27 16:00', NULL),
	(3, @waitunload, @blacksea, @auto, '2018-01-21 19:33', '2018-01-28 14:00', NULL),
	(4, @transport, @krimea, @cargo, '2018-01-22 11:48', '2018-01-29 11:00', NULL),
	(5, @waitload, @siberia, @aircraft, '2018-01-23 18:21', '2018-01-30 10:00', NULL),
	(6, @prepairing, @fareast, @aircraft, '2018-01-24 19:29', '2018-01-31 14:30', NULL),
	(7, @prepairing, @moscow, @aircraft, '2018-01-25 13:00', '2018-01-31 15:00', NULL)
on duplicate key update OrderID = OrderID;

set @first = 1;
set @second = 2;
set @third = 3;
set @fourth = 4;
set @fifth = 5;
set @sixth = 6;
set @seventh = 7;

insert into shopdb.orderposition (OrderPositionID, OrderID, ProductID, Quantity, CurrentPrice)
values
	(1, @first, @iron, 10, 180),
	(2, @first, @coal, 10, 117),
	(3, @second, @oil, 30, 1000),
	(4, @third, @wood, 20, 151),
	(5, @fourth, @plastic, 9, 488),
	(6, @fourth, @iron, 3, 181),
	(7, @fifth, @iron, 1, 183),
	(8, @fifth, @wood, 1, 118),
	(9, @fifth, @plastic, 1.5, 494),
	(10, @fifth, @sand, 0.5, 102),
	(11, @fifth, @stone, 1, 91),
	(12, @sixth, @oil, 20, 1011),
	(13, @seventh, @oil, 14, 1010)
on duplicate key update OrderPositionID = OrderPositionID;

insert into shopstore.CustomerDim (CustomerID, CompanyName, ContactName, City, Address, Email, PhoneNumber)
select CustomerID, CompanyName, ContactName, City, Address, Email, PhoneNumber from shopdb.Customer
where CustomerID not in (select CustomerID from shopstore.CustomerDim);

insert into shopstore.ProductDim (ProductID, Name, Measure)
select ProductID, Name, Measure from shopdb.Product
where ProductID not in (select ProductID from shopstore.ProductDim);

insert into shopstore.Shipmentdim (ShipmentTypeID, Name, Description)
select ShipmentTypeID, Name, Description from shopdb.shipmenttype
where ShipmentTypeID not in (select ShipmentTypeID from shopstore.Shipmentdim);

insert into shopstore.StatusDim (OrderStatusID, Name)
select OrderStatusID, Name from shopdb.orderstatus
where OrderStatusID not in (select OrderStatusID from shopstore.StatusDim);

insert into shopstore.OrderDim (OrderID, CreationDate, PlannedDate, ShipmentDate)
select OrderID, CreationDate, PlannedDate, ShipmentDate from shopdb.orders
where OrderID not in (select OrderID from shopstore.OrderDim);

drop function if exists IsHolidayDate;
create function IsHolidayDate (dDate DATE)
	returns tinyint
	return DATE_FORMAT(dDate, "%d-%m") in (
		"01-01", "02-01", "03-01", 
		"04-01", "05-01", "06-01", 
		"07-01", "08-01", "23-02", 
		"08-03", "01-05", "09-05", 
		"12-06", "04-11"
	);

insert into shopstore.DateDim (DateYear)
	select NULL
	where (select COUNT(IFNULL(dd.DateYear, 1)) from shopstore.DateDim dd
		WHERE dd.DateYear IS NULL) = 0;
		
insert into shopstore.DateDim (DateYear, DateMonth, DateDay, IsWeekend, IsHoliday)
select YEAR(od.CreationDate) as yr, MONTH(od.CreationDate) as mt, DAY(od.CreationDate) as dy, WEEKDAY(od.CreationDate) > 4, IsHolidayDate(od.CreationDate) from shopstore.OrderDim od
	where DATE(od.CreationDate) NOT IN (
		select STR_TO_DATE(CONCAT_WS("-", dd.DateYear, dd.DateMonth, dd.DateDay), "%Y-%m-%d") from shopstore.DateDim dd
	)
	group by yr, mt, dy;

insert into shopstore.DateDim (DateYear, DateMonth, DateDay, IsWeekend, IsHoliday)
select YEAR(od.PlannedDate) as yr, MONTH(od.PlannedDate) as mt, DAY(od.PlannedDate) as dy, WEEKDAY(od.PlannedDate) > 4, IsHolidayDate(od.PlannedDate) from shopstore.OrderDim od
	where DATE(od.PlannedDate) NOT IN (
		select STR_TO_DATE(CONCAT_WS("-", dd.DateYear, dd.DateMonth, dd.DateDay), "%Y-%m-%d") from shopstore.DateDim dd
	)
	group by yr, mt, dy;

insert into shopstore.DateDim (DateYear, DateMonth, DateDay, IsWeekend, IsHoliday)
select YEAR(od.ShipmentDate) as yr, MONTH(od.ShipmentDate) as mt, DAY(od.ShipmentDate) as dy, WEEKDAY(od.ShipmentDate) > 4, IsHolidayDate(od.ShipmentDate) from shopstore.OrderDim od
	where DATE(od.ShipmentDate) NOT IN (
		select STR_TO_DATE(CONCAT_WS("-", dd.DateYear, dd.DateMonth, dd.DateDay), "%Y-%m-%d") from shopstore.DateDim dd
	)
	group by yr, mt, dy;

	
drop function IsHolidayDate;

insert into shopstore.SalesFact (ProductKey, CustomerKey, OrderKey, StatusKey, ShipmentKey, CreationDateKey, PlannedDateKey, ShipmentDateKey, OrderPositionID, Quantity, SalePrice, ProductPrice)
select pd.ProductKey, cd.CustomerKey, od.OrderKey, sd.StatusKey, shd.ShipmentKey, ddc.DateKey, ddp.DateKey, dds.DateKey, op.OrderPositionID, op.Quantity, op.CurrentPrice, p.Price from shopdb.orderposition op
	inner join shopdb.orders o
		on op.OrderID = o.OrderID
	inner join shopdb.product p
		on op.ProductID = p.ProductID
	inner join shopstore.ProductDim pd
		on op.ProductID = pd.ProductID
	inner join shopstore.CustomerDim cd
		on o.CustomerID = cd.CustomerID
	inner join shopstore.OrderDim od
		on op.OrderID = od.OrderID
	inner join shopstore.StatusDim sd
		on o.OrderStatusID = sd.StatusKey
	inner join shopstore.Shipmentdim shd
		on o.TransportTypeID = shd.ShipmentTypeID
	inner join shopstore.DateDim ddc
		on DATE(o.CreationDate) = STR_TO_DATE(CONCAT_WS("-", ddc.DateYear, ddc.DateMonth, ddc.DateDay), "%Y-%m-%d")
	inner join shopstore.DateDim ddp
		on DATE(o.PlannedDate) = STR_TO_DATE(CONCAT_WS("-", ddp.DateYear, ddp.DateMonth, ddp.DateDay), "%Y-%m-%d")
	inner join shopstore.DateDim dds
		on DATE(o.ShipmentDate) = STR_TO_DATE(CONCAT_WS("-", dds.DateYear, dds.DateMonth, dds.DateDay), "%Y-%m-%d") OR (o.ShipmentDate IS NULL AND dds.DateYear IS NULL)
where op.OrderPositionID not in (select sf2.OrderPositionID from shopstore.SalesFact sf2);


insert into shopwindow.DailySales (ProductID, ProductName, ProductMeasure, TotalQuantity, TotalPrice, OrderDay, OrderMonth, OrderYear)
	select p.ProductID, p.Name, p.Measure, SUM(op.Quantity), SUM(op.CurrentPrice * op.Quantity), DAY(o.CreationDate), MONTH(o.CreationDate), YEAR(o.CreationDate) from shopdb.Product p
		inner join shopdb.OrderPosition op
			on op.ProductID = p.ProductID
		inner join shopdb.Orders o
			on op.OrderID = o.OrderID
		group by p.ProductID, p.Name, p.Measure, DATE(o.CreationDate)
	on duplicate key update TotalQuantity = VALUES(TotalQuantity), TotalPrice = VALUES(TotalPrice);